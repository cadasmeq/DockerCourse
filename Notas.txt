Build Caché
Docker build -t <image_name>:<latest> .

Docker guarda un snapshot de cada imagen luego de cada instrucción de build.
docker build --no-cache -t <imagen> .

docker history image -> historia de una imagen

instrucción [CMD]

CMD define el comando por defecto a ejecutar cuando se crea el contenedor.
Se puede usar tanto el formato shell como exec
solo puede especificarse una vez en el docker filesizeformat
puede ser anulado manualmente via docker CLI.

instrucción [ENTRY POINT]
define el punto de entrada con el comando que el contenedor correra cuando se crea
los argumentos de runtime son enviados como parametros a la instruccion entrypoint
tambien posee forma de exec y shell
el contenedor funciona a modo de ejecutable

se utilizan para generar contenedores interactivos (tipo bash)

docker search python -> busca imagenes

instrucción [WORKDIR]
La instrucción WORKDIR permite setear el directorio de trabajo para el cual las instrucciones RUN, CMD, ENTRYPOINT y COPY pueden utilizar.
Usa sintaxis WORKDIR /RUTA/A/CARPETA
La ruta puede ser tanto absoluta como relativa dentro del contenedor
La instruccion puede utilizarse más de una vez

instruccion [ADD]
Posee el mismo formato que la instruccion COPY y ambos operan de manera muy similar
ADD tiene la habilidad de descomp rimir archivos automaticamente
ADD puede obtener archivos de una URL (no descomprime en este caso)
Ambas instrucciones realizan checksum de los archivos añadidos para calcular la cache

OTRAS instrucciones

MAINTAINER : Agrega metadata sobre el dueño de la imagen

ENV : permite añadir variables de entorno al contenedor

LABEL : permite a gregar etiquetas al contenedor.

BUENAS PRACTICAS DOCKER FILES
Cada linea de dockerfile crea una imagen nueva, si modifica el estado de la imagen, es importante buscar el balance entre la cantidad de capas creadas y la legibilidad del docker file.

No instalar paquetes innecesarios
Utilizar un entrypoint por dockerfile
Combinar comandos similares utilizando && y \
Utilizar el sistema de cache de manera inteligente.

# VOLUMENES
Un directorio designado en el contenedor en el cual se persiste informacion independientemente dewl ciclo de vida del contenedor

Los cambios de un volumen son exluidos cuando se guarda una imagen

La informacion se persiste aunque se elimine el contenedor
Pueden estan mapeadas a un directorio del host
Pueden compartirse entre contenedores 
Las instrucciones 'RUN' del Dockerfile no modifican la información de los volumes 

docker volume create
docker volume ls 
docker volumne inspect
docker rm 

para montar un volumen se utiliza -v 

se pueden montar directorios del host con el formato -v [host path]:[container path]:[ro|rw]

instrouccion [VOLUME]
La instruccion VOLUME crea un punto de montaje de volumenes en un dockerfile

Se pueden especificar los argumentos como json o string

Con este método no se pueden mapear archivos del host (debido a que el dockerfile puede ejecutarse en cualquier equipo)

los volumenes son inicializados cuando el contenedor se inicia con la información existente en el directorio.

los volumenes se crean con nombre aleatorio

Volumenes anonimos con rutas del sistema operativo

docker run -it -v /PATH/QUE/COMPARTIRÉ:/PATH/EN/CONTENEDOR ubuntu bash


# ASPECTOS DE SEGURIDAD
(!) pendiente

# MODELO DE RED DE DOCKER
Cuando docker inicia, crea una interfaz virtual docker0 en el equipo del host.
docker 0 es asignado un rango de IP de la subnet privada definida por la RFC 1918

comando docker network nos permite interactuar con las redes en docker y los contenedores dentro de ellas

docker network create
docker network connect
docker network ls
docker network rm
docker network disconnect
docker network inspect

docker run --net=host -it app bash


# mismas redes (default bridge) pueden comunicarse
# para concectar un contenedor a dos redes se utiliza:
docker run -d --net=mi_red --name ubuntu ubuntu
docker network connect bridge ubuntu

# linkear dos contenedores --link
docker run -d -net=mi_red --link redis ubuntu

#inspect redes
docker network inspect
docker network ls


# DOCKER MACHINE
docher machine es una herramienta para provisionar hosts de docker y configurar el ENgine en los mismos.

- Crea hosts dfe docker adicionales en el entorno local
- Crea hosts dse docker en clouds providers: Amazon AWS, DigitalOcean
- Machine crea el servidor, instala y configura docker.

docker-machine create
docker-machine --driver 
